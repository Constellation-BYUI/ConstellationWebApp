@model ConstellationWebApp.Models.ViewModel
@using System.Security.Claims;

@{
    ViewData["Title"] = "Skills";
    var currentUserObj = (Model.Users).FirstOrDefault();
    var photoPath = "~/image/" + currentUserObj.PhotoPath;
    var currentUser = this.User.FindFirstValue(ClaimTypes.NameIdentifier);
    var assigned = false;
    var kickout = false;
}

<h1>Your Skills</h1>
<!-- #region Outline-->
@*Outline for this page
    1. The page has four forms in all. Contained into two cards. Changing between the respective add/remove with a button click.
        a. The UserSkills form adding skills to a logged in user
        b. The UserSkills form removing skills from a logged in user
            - Both of these forms will first loop through the pulled Discipline (which by default is the user's Area of Discipline/first discipline of list')
            - It will display all the skills linked to that discipline to allow multi-skill editing
                (For adding it will look to see if the user does NOT have that skill in user skills so they can be added )
                (For removing it will look to see if the user DOES have that skill in user skills so they can be removed )
            - Then we will have the form button to post the result
        c. The SkillLink form adding a link to a set/Individual skill: prooving the legitimacy of the skill
            - will loop through all the selected User Skills and display them and thier category/Discipline
        d. The SkillLink form removing the link from a set/Individual skill
            - will list the skills of the respective link and have a remove button*@
<!-- #endregion-->
<div class="Split-forms">

    @{
        <section class="Skill-form">

            @* Discipline Name *@
            <h3>@Model.currentDiscipline.DisciplineName</h3>

            @* this is to seach by a specific discipline *@
            <form asp-action="Index" asp-controller="UserSkills">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <datalist id="AreaOfDiscipline-List">
                            @{
                                List<ConstellationWebApp.Models.Discipline> disciplines = Model.Disciplines.ToList();

                                foreach (var discipline in disciplines)
                                {
                                    <option value="@discipline.DisciplineName" data-id="@discipline.DisciplineName"></option>
                                }
                            @:</datalist>
                        @:</div>
                            }
                        </div>

                        <div class="form-group">
                            <label text= class="control-label"></label>
                            <input name="disciplineSearchString" list="AreaOfDiscipline-List">
                            <div class="form-group mx-auto mb-0">
                                <input class="btn btn-md btn-primary mb-1 mx-auto" type="submit" value="Find Discipline" />
                            </div>
                        </div>
                    </form>
                    <br />
                    <div>
                        <button class="tablink" onclick="openPage('AddSkills', this, 'lightblue')" id="defaultOpen">Add Skills</button>
                        <button class="tablink" onclick="openPage('RemoveSkills', this, 'red')">Remove Skills</button>

                        @*Adding UserSKills*@
                    <div id="AddSkills" class="tabcontent">
                        <h3>@Model.currentDiscipline.DisciplineName related skills not added to your profile</h3>
                        <form asp-action="CreateManyUserSkills" asp-controller="UserSkills">
                            @{
                                foreach (var skill in Model.SkillDisciplines.Where(i => i.DisciplineID == Model.currentDiscipline.DisciplineID))
                                {
                                    Skill skillName = Model.Skills.Where(i => i.SkillID == skill.SkillID).FirstOrDefault();
                                    kickout = false;
                                    foreach (var uSkill in Model.UserSkills.Where(i => i.UserID == currentUser && i.SkillID == skill.SkillID))
                                    {
                                        kickout = true;
                                    }
                                    if (kickout == true)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        assigned = false;
                                        @:<div>
                                            <input type="checkbox" name="skills" value="@skill.SkillID" @(Html.Raw((assigned) ? "checked=\"checked\"" : "")) /> @skillName.SkillName;
                                        @:</div>
                                    }
                                }
                                <div class="form-group mb-0">
                                    <input type="hidden" value="@currentUser" class="form-control" name="userID" />
                                </div>
                                <div class="form-group">
                                    <input type="submit" value="Link selected skills" class="btn btn-sm btn-info" />
                                </div>
                            }
                            </form>
                        </div>
                        
                        @*Removing UserSKills*@
                        <div id="RemoveSkills" class="tabcontent">
                            <h3>Remove Skills</h3>
                            <p>Remove Skills ... </p>
                        </div>
                    </div>
        </section>
    }
    


<section class="Link-form">
    <h3>Linking Skills</h3>
    <br />
    <p>Add a link to prove your competency for a set or individuals skill.</p>
    <br />
    <br />
    <button class="tablink" onclick="openLinkPage('AddSkillLink', this, 'lightblue')" id="defaultLinkOpen">Add Skill(s) Link</button>
    <button class="tablink" onclick="openLinkPage('RemoveSkillLink', this, 'red')">Remove Skill(s) Link</button>

    <div id="AddSkillLink" class="linktabcontent">
        <h3>Add Skill Link</h3>
        <p>Add many skills to a link.</p>
    </div>

    <div id="RemoveSkillLink" class="linktabcontent">
        <h3>Remove SKill Link</h3>
        <p>Remove your skill links.</p>
    </div>
</section>
</div>

<style>
    body, html {
        height: 100%;
        margin: 0;
        font-family: Arial;
    }

    .Split-forms {
        display: grid;
        grid-template-columns: 5% 40% 10% 40% 5%;
        grid-template-rows: 500px;
    }

    .Skill-form {
        grid-column: 2/3;
    }

    .Link-form {
        grid-column: 4/5;
    }

    /* Style tab links */
    .tablink {
        background-color: #555;
        color: white;
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 14px 16px;
        font-size: 17px;
        width: 50%;
    }

        .tablink:hover {
            background-color: #777;
        }

    /* Style the tab content (and add height:100% for full page content) */
    .tabcontent {
        color: white;
        display: none;
        padding: 100px 20px;
        height: 100%;
    }

    .linktabcontent {
        color: white;
        display: none;
        padding: 100px 20px;
        height: 100%;
    }


    #AddSkills {
        background-color: lightblue;
    }

    #RemoveSkills {
        background-color: red;
    }

    #AddSkillLink {
        background-color: lightblue;
    }

    #RemoveSkillLink {
        background-color: red;
    }
</style>

<script>
    function openPage(pageName, elmnt, color) {
        // Hide all elements with class="tabcontent" by default */
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Remove the background color of all tablinks/buttons
        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].style.backgroundColor = "";
        }

        // Show the specific tab content
        document.getElementById(pageName).style.display = "block";

        // Add the specific color to the button used to open the tab content
        elmnt.style.backgroundColor = color;
    }

    function openLinkPage(pageName, elmnt, color) {
        // Hide all elements with class="tabcontent" by default */
        var i, linktabcontent, tablinks;
        tabcontent = document.getElementsByClassName("linktabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Remove the background color of all tablinks/buttons
        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].style.backgroundColor = "";
        }

        // Show the specific tab content
        document.getElementById(pageName).style.display = "block";

        // Add the specific color to the button used to open the tab content
        elmnt.style.backgroundColor = color;
    }


    // Get the element with id="defaultOpen" and click on it
    document.getElementById("defaultLinkOpen").click();
    document.getElementById("defaultOpen").click();

</script>
